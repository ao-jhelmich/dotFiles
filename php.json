{
		"property": {
			"prefix": "property",
			"description": "create a product type property",
			"body": [
				"'$1' => ['etim' => ${2:null}, 'visible_for_buyer' => ${3:true}, 'filter_for_buyer' => ${4:-1}, 'productname_bullet' => ${5:-1}],",
				"$6"
			]
		},
		"p-product": {
			"prefix": "p-product",
			"description": "create a product type property",
			"body": [
				"Product::make(\\$product->getPropertyByName('$1'))->productType($2),"
			]
		},
		"p-select": {
			"prefix": "p-select",
			"description": "create a product type property",
			"body": [
				"Select::make(\\$product->getPropertyByName('$1'))->options([$2]),"
			]
		},
		"p-toggle": {
			"prefix": "p-toggle",
			"description": "create a product type property",
			"body": [
				"Toggle::make(\\$product->getPropertyByName('$1')),"
			]
		},
		"p-number": {
			"prefix": "p-number",
			"description": "create a product type property",
			"body": [
				"Number::make(\\$product->getPropertyByName('$1')),"
			]
		},
		"p-text": {
			"prefix": "p-text",
			"description": "create a product type property",
			"body": [
				"Text::make(\\$product->getPropertyByName('$1')),"
			]
		},
		"test": {
			"prefix": "test",
			"description": "create a test method",
			"body": [
				"/** @test */",
				"public function ${1:example_test}()",
				"{",
				"\t$2",
				"}",
			],
		},
		"hasMany": {
			"prefix": "hasMany",
			"description": "Laravel: create a HasMany relation",
			"body": [
				"/**",
				" * Get the related $1",
				" *",
				" * @return \\Illuminate\\Database\\Eloquent\\Relations\\HasMany",
				" */",
				"public function $1()",
				"{",
				"    return \\$this->hasMany(\\App\\\\$2::class);",
				"}",
			],
		},
		"hasOne": {
			"prefix": "hasOne",
			"description": "Laravel: create a HasOne relation",
			"body": [
				"/**",
				" * Get the related $1",
				" *",
				" * @return \\Illuminate\\Database\\Eloquent\\Relations\\HasOne",
				" */",
				"public function $1()",
				"{",
				"    return \\$this->hasOne(\\App\\\\$2::class);",
				"}",
			],
		},
		"belongsTo": {
			"prefix": "belongsTo",
			"description": "Laravel: create a belongsTo relation",
			"body": [
				"/**",
				" * Get the related $1",
				" *",
				" * @return \\Illuminate\\Database\\Eloquent\\Relations\\belongsTo",
				" */",
				"public function $1()",
				"{",
				"    return \\$this->belongsTo(\\App\\\\$2::class);",
				"}",
			],
		},
		"fillable": {
			"prefix": "fillable",
			"description": "Laravel: create fillable property",
			"body": [
				"/**",
				" * The attributes that are mass assignable.",
				" *",
				" * @var array",
				" */",
				"protected \\$fillable = [",
				"    '${1:name}',",
				"];",
			],
		},
		"casts": {
			"prefix": "casts",
			"description": "Laravel: create casts property",
			"body": [
				"/**",
				" * The attributes that should be cast to native types.",
				" *",
				" * @var array",
				" */",
				"protected \\$casts = [",
				"    '${1:name}',",
				"];",
			],
		},
		"dates": {
			"prefix": "dates",
			"description": "Laravel: create dates property",
			"body": [
				"/**",
				" * The attributes that should be mutated to dates.",
				" *",
				" * @var array",
				" */",
				"protected \\$dates = [",
				"    '${1:name}',",
				"];",
			],
		},
		"guarded": {
			"prefix": "guarded",
			"description": "Laravel: create guarded property",
			"body": [
				"/**",
				" * The attributes that aren't mass assignable.",
				" *",
				" * @var array",
				" */",
				"protected \\$guarded = [];",
			],
		},
		"index": {
			"prefix": "index",
			"description": "Laravel: index method",
			"body": [
				"/**",
				" * Display a listing of the resource.",
				" *",
				" * @return \\\\Illuminate\\\\Http\\\\Response",
				" */",
				"public function index()",
				"{",
				"    ${1://}",
				"}",
			],
		},
		"create": {
			"prefix": "create",
			"description": "Laravel: create method",
			"body": [
				"/**",
				" * Show the form for creating a new resource.",
				" *",
				" * @return \\\\Illuminate\\\\Http\\\\Response",
				" */",
				"public function create()",
				"{",
				"    ${1://}",
				"}",
			],
		},
		"store": {
			"prefix": "store",
			"description": "Laravel: store method",
			"body": [
					"/**",
					" * Display a listing of the resource.",
					" *",
					" * @param  \\\\Illuminate\\\\Http\\\\Request  $request",
					" * @return \\\\Illuminate\\\\Http\\\\Response",
					" */",
					"public function store(Request \\$request)",
					"{",
					"    ${1://}",
					"}",
			],
		},
		"show": {
			"prefix": "show",
			"description": "Laravel: show method",
			"body": [
				"/**",
				" * Display the specified resource.",
				" *",
				" * @param  \\\\App\\\\${1:Model} \\$${2:model}",
				" * @return \\\\Illuminate\\\\Http\\\\Response",
				" */",
				"public function show(${1:Model} \\$${2:model})",
				"{",
				"    ${3://}",
				"}",
			],
		},
		"edit": {
			"prefix": "edit",
			"description": "Laravel: edit method",
			"body": [
				"/**",
				" * Show the form for editing the specified resource.",
				" *",
				" * @param  \\\\App\\\\${1:Model} \\$${2:model}",
				" * @return \\\\Illuminate\\\\Http\\\\Response",
				" */",
				"public function edit(${1:Model} \\$${2:model})",
				"{",
				"    ${3://}",
				"}",
			],
		},
		
		"update": {
			"prefix": "update",
			"description": "Laravel: update method",
			"body": [
				"/**",
				" * Update the specified resource in storage.",
				" *",
				" * @param  \\\\Illuminate\\\\Http\\\\Request  $request",
				" * @param  \\\\App\\\\${1:Model} \\$${2:model}",
				" * @return \\\\Illuminate\\\\Http\\\\Response",
				" */",
				"public function update(Request \\$request, ${1:Model} \\$${2:model})",
				"{",
				"    ${3://}",
				"}",
			],
		},
		"destroy": {
			"prefix": "destroy",
			"description": "Laravel: destroy method",
			"body": [
				"/**",
				" * Remove the specified resource from storage.",
				" *",
				" * @param  \\\\App\\\\${1:Model} \\$${2:model}",
				" * @return \\\\Illuminate\\\\Http\\\\Response",
				" */",
				"public function destroy(${1:Model} \\$${2:model})",
				"{",
				"    ${3://}",
				"}",
			],
		},
		"foreignKey": {
			"prefix": "foreignKey",
			"body": [
				"$$table->foreign('$1')->references('${3:id}')->on('$2')->onDelete('${4:cascade}')->onUpdate('${5:cascade}');"
			]
		},
		"debugFramework": {
			"prefix": "debugFramework",
			"body": [
				"if (DEVELOPMENT) {",
				"\techo '<pre>';",
				"\tprint_r($1);",
				"\texit;",
				"}"
			]
		}
	}