# Switch PHP versions
phpv() {
    valet stop
    brew unlink php@8.0
    brew unlink php
    brew link --force --overwrite $1
    brew services start $1
    composer global update
    rm -f ~/.config/valet/valet.sock
    valet install
}

alias php80="phpv php@8.0"
alias php81="phpv php"

# Create a new directory and enter it
function mkd() {
   mkdir -p "$@" && cd "$@"
}

# Global homestead
function homestead() {
    ( cd ~/Homestead && vagrant $* )
}

#small functions
function gocode() {
   cd ~/code
}

function govalet() {
  cd ~/code/valet
}

# Copy ssh key
function copysshkey() {
    pbcopy < ~/.ssh/id_ed25519.pub
}

function csfixandpush {
    echo "Starting cs fixer" &&
    php-cs-fixer fix &&
    echo "Cs fixed" &&
    echo "Adding to commit" &&
    gaa &&
    gcom "Php cs styling" &&
    legit sync &&
    echo "cs fixer pushed"
}

# Copy virtualhosts setup
function copysetupvirtualhosts() {
    echo "ln -s /data/srv/apache/virtualhosts virtualhosts" | pbcopy
}

function pcoverage() {
    echo "Turning on xdebux" &&
    xon &&
    phpunit --prepend xdebug-filter.php --coverage-html tests/coverage/ &&
    xoff
}

function pall() {
    echo "First we clear the laravel.log" &&
    sleep .8 &&

    echo "Clearing the log..."
    echo -n '' > storage/logs/laravel.log &&

    sleep .8 &&

    echo "Now we run all the unit tests, " &&
    echo "if there is an error from your tests it will be displayed in the newly generated laravel.log" &&
    vendor/bin/phpunit
}

function resetVendor() {
    echo 'First removing vendor' &&
    rm -rf vendor/ &&
    echo 'Then we remove composer.lock' &&
    rm composer.lock &&
    echo 'Then we install composer.json' &&
    composer install &&
    echo 'All done!'
}

function resetNode() {
    echo 'First removing node_modules' &&
    rm -rf node_modules/ &&
    echo 'Then we remove package-lock.json' &&
    rm package-lock.json &&
    echo 'Then we install package.json' &&
    npm install &&
    echo 'All done!'
}

# self invoking functions
ssh-add ~/.ssh/id_rsa > /dev/null 2>&1

wipavans () {
	git add .
	NEXT_COMMIT_MESSAGE=`curl -s http://whatthecommit.com/index.txt`
	git commit -m "$NEXT_COMMIT_MESSAGE"
}

wip () {
    ./vendor/bin/pint --dirty

    git add . || return
    echo "Niet wippen jij! Wat heb je veranderd?"
    read message
    git commit -m "$message"
}

cdb () {
    echo 'Creating database:' $1 &&
    mysql -uroot -e "CREATE DATABASE IF NOT EXISTS $1" &&
    echo 'Copying database name to clipboard: ' &&
    echo $1 | pbcopy
}

commit () {
    git add . && git commit -m $1
}

branch () {
    git branch $1 && git checkout $1
}

policy () {
    ( php artisan make:policy $1Policy --model=$1 )
}

makehtaccess () {
    echo 'Generating htaccess' &&

    echo "RewriteEngine off" >> .htaccess
}

function odb() {
    TP_DRIVER="mysql"
    TP_HOST="127.0.0.1"
    TP_USER="root"
    TP_PASSWORD=""

    if [ -f ".env" ]; then
        TP_DATABASE=$(grep -m1 DB_DATABASE .env | cut -d '=' -f2)
    else
        TP_DATABASE=$(php -r 'include("config.php"); echo DB_NAME;')
    fi

    open $TP_DRIVER://$TP_USRE:$TP_PASSWORD@$TP_HOST/$TP_DATABASE
}

# Scrape a single webpage with all assets
function scrapeUrl() {
    wget --adjust-extension --convert-links --page-requisites --span-hosts --no-host-directories "$1"
}

# Run ./vendor/bin/pint and if there are changes commit them with message "pint"
function pintFixPush() {
    ./vendor/bin/pint

    if [ -n "$(git status --porcelain)" ]; then
        git add .
        git commit -m "pint"
        git sync
    fi
}